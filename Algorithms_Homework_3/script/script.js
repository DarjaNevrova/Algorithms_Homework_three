// //Alhoritms_Homework_three

// 1) Вопрос: Что такое рекурсия?
//    Ответ: Процесс, в котором функция прямо вызывает сама себя, называется рекурсией, а соответствующая функция называется рекурсивной функцией. 
// Подход, когда мы вызываем сами себя. 

// 2) Вопрос: Что такое стек?
//    Ответ: Линейная структура данных, которая следует определенному порядку выполнения операций.(push,pop,isEmpty,peek)

// 3) Вопрос: Какие типы рекурсии существуют? Каких нужно избегать?
//    Ответ: Существует прямая и косвенная рекурсии.
//    Прямая - вызывает сама себя;
//    Kосвенная - вызывает другую функцию, которая прямо или косвенно вызывает первую.
//    Лучше избегать косвенную рекурсию, потому что такой код сложнее поддерживать.

// 4) Вопрос: Когда стоит выбрать рекурсию, а когда цикл(итерацию)?
//    Ответ: Рекурсия - оперируем функциями, быть осторожным, чтобы не превысить лимит памяти стека.
//    Итерация - не требуется доп.места.
//    Рекурсию можем выбрать, когда точно уверены, что стек не переполнится, во всех остальных случаях - итерацию. Нет конкретного ответа, необходимо смотреть по ситуации.

// 5) Вопрос: Что обязательно нужно учитывать/добавлять при работе с рекурсией?
//    Ответ: Необходимо обеспечить определенный случай, чтобы завершить процесс рекурсии.(Иначе, будет ошибка)

// 6) Вопрос: Напишите рекурсивный метод для нахождения факториала числа 5! = 1 * 2 * 3 * 4 * 5
//    Ответ: 

// function factorial(n) {
//     return (n === 0 || n === 1) ? 1 : n * factorial(n - 1);
//   }  

// 7) Вопрос: Напишите алгоритм Евклида через рекурсию
//    Ответ: 

// function euclideanAlgorithm(a, b) {
//     return b === 0 ? a : euclideanAlgorithm(b, a % b);
// }